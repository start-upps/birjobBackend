name: Job Notifications

on:
  # Run every 40 minutes
  schedule:
    - cron: '*/45 * * * *'
  
  # Allow manual trigger for testing
  workflow_dispatch:

jobs:
  send-job-notifications:
    runs-on: ubuntu-latest
    
    steps:
    - name: Health Check
      run: |
        echo "üè• Checking backend health..."
        HEALTH_RESPONSE=$(curl -s "${{ secrets.BACKEND_URL || 'https://birjobbackend-ir3e.onrender.com' }}/api/v1/health")
        STATUS=$(echo "$HEALTH_RESPONSE" | jq -r '.status // "unknown"')
        
        if [ "$STATUS" = "healthy" ]; then
          echo "‚úÖ Backend is healthy"
        else
          echo "‚ùå Backend health check failed: $STATUS"
          exit 1
        fi
        
        # Show metrics
        echo "$HEALTH_RESPONSE" | jq -r '.metrics // {} | to_entries[] | "- \(.key): \(.value)"'
    
    - name: Check Active Users
      run: |
        echo "üë§ Checking active users with keywords..."
        
        # Retry logic for deployment timing
        for i in {1..3}; do
          echo "‚è≥ Attempt $i: Checking active devices..."
          
          # Get list of devices for verification
          DEVICES_RESPONSE=$(curl -s "${{ secrets.BACKEND_URL || 'https://birjobbackend-ir3e.onrender.com' }}/api/v1/notifications/devices")
          DEVICE_COUNT=$(echo "$DEVICES_RESPONSE" | jq -r '.data.active_devices_count // 0')
          
          echo "Active devices found: $DEVICE_COUNT"
          
          if [ "$DEVICE_COUNT" -gt 0 ]; then
            echo "‚úÖ SUCCESS: Found $DEVICE_COUNT active devices"
            
            # Show device info
            echo "$DEVICES_RESPONSE" | jq -r '.data.devices[] | "Device: \(.device_id) | Keywords: \(.keywords_count) | Preview: \(.keywords | join(", "))"'
            break
          else
            echo "‚ö†Ô∏è No devices found on attempt $i"
            if [ "$i" -eq 3 ]; then
              echo "‚ùå Failed after 3 attempts!"
              exit 1
            fi
            echo "‚è≥ Waiting 30s before retry..."
            sleep 30
          fi
        done
    
    - name: Process Job Notifications
      run: |
        echo "üîç Scanning database for job matches every 45 minutes..."
        
        # First, get total count of jobs
        echo "üìä Fetching job count from database..."
        
        # Get total count first (only jobs from last 30 days for efficiency)
        TOTAL_RESPONSE=$(curl -s "${{ secrets.BACKEND_URL || 'https://birjobbackend-ir3e.onrender.com' }}/api/v1/jobs/?limit=1&offset=0&days=30")
        TOTAL_JOBS=$(echo "$TOTAL_RESPONSE" | jq -r '.data.pagination.total // 0')
        
        echo "üìà Total jobs in database (last 24 hours): $TOTAL_JOBS"
        
        if [ "$TOTAL_JOBS" -eq 0 ]; then
          echo "‚ÑπÔ∏è No jobs found in database"
          exit 0
        fi
        
        # Fetch jobs in batches (API limit is 100 per request)
        echo "üì¶ Fetching jobs in batches (API limit: 100 per request)..."
        
        BATCH_SIZE=100
        ALL_JOBS="[]"
        OFFSET=0
        
        while [ "$OFFSET" -lt "$TOTAL_JOBS" ]; do
          echo "üì• Fetching batch: offset=$OFFSET, limit=$BATCH_SIZE"
          
          BATCH_RESPONSE=$(curl -s "${{ secrets.BACKEND_URL || 'https://birjobbackend-ir3e.onrender.com' }}/api/v1/jobs/?limit=$BATCH_SIZE&offset=$OFFSET&days=1")
          BATCH_JOBS=$(echo "$BATCH_RESPONSE" | jq -c '.data.jobs // []')
          BATCH_COUNT=$(echo "$BATCH_JOBS" | jq 'length')
          
          echo "üìä Batch size: $BATCH_COUNT jobs"
          
          if [ "$BATCH_COUNT" -eq 0 ]; then
            echo "‚ö†Ô∏è Empty batch received, stopping"
            break
          fi
          
          # Merge batch with all jobs
          ALL_JOBS=$(echo "$ALL_JOBS $BATCH_JOBS" | jq -s 'add')
          
          # Update offset
          OFFSET=$((OFFSET + BATCH_SIZE))
          
          # Small delay to avoid rate limiting
          sleep 1
        done
        
        # Get final count
        JOBS_COUNT=$(echo "$ALL_JOBS" | jq 'length')
        echo "üìà Successfully fetched $JOBS_COUNT total jobs to process"
        
        if [ "$JOBS_COUNT" -eq 0 ]; then
          echo "‚ÑπÔ∏è No jobs retrieved from batches"
          exit 0
        fi
        
        # Process jobs through notification system
        echo "üîî Processing jobs for notifications..."
        RESPONSE=$(curl -s -X POST "${{ secrets.BACKEND_URL || 'https://birjobbackend-ir3e.onrender.com' }}/api/v1/minimal-notifications/process-jobs" \
          -H "Content-Type: application/json" \
          -d "{\"jobs\": $ALL_JOBS, \"background\": false}")
        
        # Parse results (correct response structure)
        JOBS_PROCESSED=$(echo "$RESPONSE" | jq -r '.stats.processed_jobs // 0')
        DEVICES_MATCHED=$(echo "$RESPONSE" | jq -r '.stats.matched_devices // 0') 
        NOTIFICATIONS_SENT=$(echo "$RESPONSE" | jq -r '.stats.notifications_sent // 0')
        ERRORS=$(echo "$RESPONSE" | jq -r '.stats.errors // 0')
        SUCCESS=$(echo "$RESPONSE" | jq -r '.success // false')
        
        echo "üìä Notification Results:"
        echo "- Jobs processed: $JOBS_PROCESSED"
        echo "- Devices matched: $DEVICES_MATCHED" 
        echo "- Notifications sent: $NOTIFICATIONS_SENT"
        echo "- Errors: $ERRORS"
        echo "- Success: $SUCCESS"
        
        # Show success/failure
        if [ "$NOTIFICATIONS_SENT" -gt 0 ]; then
          echo "‚úÖ SUCCESS: $NOTIFICATIONS_SENT notifications sent!"
        elif [ "$DEVICES_MATCHED" -gt 0 ]; then
          echo "‚ö†Ô∏è Devices matched but no notifications sent (check APNs configuration)"
        else
          echo "‚ÑπÔ∏è No matching jobs found for current user keywords"
        fi
        
        # Log timestamp for monitoring
        echo "üïê Completed at: $(date)"
        
        # Force exit to ensure GitHub Action terminates
        exit 0