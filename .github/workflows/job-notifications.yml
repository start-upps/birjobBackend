name: Job Notifications

on:
  # Run 3 times daily at UTC 06:00, 09:00, 13:00
  schedule:
    - cron: '0 6,9,13 * * *'
  
  # Allow manual trigger for testing
  workflow_dispatch:

jobs:
  send-job-notifications:
    runs-on: ubuntu-latest
    
    steps:
    - name: Health Check
      run: |
        echo "üè• Checking backend health..."
        HEALTH_RESPONSE=$(curl -s "${{ secrets.BACKEND_URL || 'https://birjobbackend-ir3e.onrender.com' }}/api/v1/health")
        STATUS=$(echo "$HEALTH_RESPONSE" | jq -r '.status // "unknown"')
        
        if [ "$STATUS" = "healthy" ]; then
          echo "‚úÖ Backend is healthy"
        else
          echo "‚ùå Backend health check failed: $STATUS"
          exit 1
        fi
        
        # Show metrics
        echo "$HEALTH_RESPONSE" | jq -r '.metrics // {} | to_entries[] | "- \(.key): \(.value)"'
    
    - name: Check Active Users
      run: |
        echo "üë§ Checking active users with keywords..."
        
        # Retry logic for deployment timing
        for i in {1..3}; do
          echo "‚è≥ Attempt $i: Checking active devices..."
          
          # Get list of devices for verification
          DEVICES_RESPONSE=$(curl -s "${{ secrets.BACKEND_URL || 'https://birjobbackend-ir3e.onrender.com' }}/api/v1/notifications/devices")
          DEVICE_COUNT=$(echo "$DEVICES_RESPONSE" | jq -r '.data.active_devices_count // 0')
          
          echo "Active devices found: $DEVICE_COUNT"
          
          if [ "$DEVICE_COUNT" -gt 0 ]; then
            echo "‚úÖ SUCCESS: Found $DEVICE_COUNT active devices"
            
            # Show device info
            echo "$DEVICES_RESPONSE" | jq -r '.data.devices[] | "Device: \(.device_id) | Keywords: \(.keywords_count) | Preview: \(.keywords | join(", "))"'
            break
          else
            echo "‚ö†Ô∏è No devices found on attempt $i"
            if [ "$i" -eq 3 ]; then
              echo "‚ùå Failed after 3 attempts!"
              exit 1
            fi
            echo "‚è≥ Waiting 30s before retry..."
            sleep 30
          fi
        done
    
    - name: Process Job Notifications
      run: |
        echo "üîç Triggering job notification processing..."
        echo "üí° Backend will process all current jobs and send notifications to matched devices"
        
        # Wait for backend deployment to complete
        echo "‚è≥ Waiting 30 seconds for backend deployment..."
        sleep 30
        
        # API call with better error handling
        echo "üì° Making API request..."
        RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST "${{ secrets.BACKEND_URL || 'https://birjobbackend-ir3e.onrender.com' }}/api/v1/minimal-notifications/process-all" \
          -H "Content-Type: application/json" \
          -d '{"trigger_source": "github_actions", "background": false}')
        
        # Extract HTTP status code
        HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
        RESPONSE_BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')
        
        echo "üì° HTTP Status: $HTTP_CODE"
        echo "üìÑ Response: $RESPONSE_BODY"
        
        # Check if response is valid JSON
        if echo "$RESPONSE_BODY" | jq empty 2>/dev/null; then
          echo "‚úÖ Valid JSON response received"
          
          # Parse results
          SUCCESS=$(echo "$RESPONSE_BODY" | jq -r '.success // false')
          JOBS_PROCESSED=$(echo "$RESPONSE_BODY" | jq -r '.stats.processed_jobs // 0')
          DEVICES_MATCHED=$(echo "$RESPONSE_BODY" | jq -r '.stats.matched_devices // 0')
          NOTIFICATIONS_SENT=$(echo "$RESPONSE_BODY" | jq -r '.stats.notifications_sent // 0')
          ERRORS=$(echo "$RESPONSE_BODY" | jq -r '.stats.errors // 0')
          
          echo "üìä Notification Results:"
          echo "- Jobs processed: $JOBS_PROCESSED"
          echo "- Devices matched: $DEVICES_MATCHED" 
          echo "- Notifications sent: $NOTIFICATIONS_SENT"
          echo "- Errors: $ERRORS"
          echo "- Success: $SUCCESS"
          
          # Show success/failure
          if [ "$NOTIFICATIONS_SENT" -gt 0 ]; then
            echo "‚úÖ SUCCESS: $NOTIFICATIONS_SENT notifications sent!"
          elif [ "$DEVICES_MATCHED" -gt 0 ]; then
            echo "‚ö†Ô∏è Devices matched but no notifications sent (check APNs configuration)"
          else
            echo "‚ÑπÔ∏è No matching jobs found for current user keywords"
          fi
        else
          echo "‚ùå Invalid JSON response or error occurred"
          echo "üìÑ Raw response: $RESPONSE_BODY"
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚ö†Ô∏è Backend returned 200 but invalid JSON - likely processing issue"
          else
            echo "‚ùå HTTP Error $HTTP_CODE - Backend may be unavailable"
          fi
        fi
        
        # Log timestamp for monitoring
        echo "üïê Completed at: $(date)"
        
        # Always exit successfully to avoid blocking deployment
        exit 0