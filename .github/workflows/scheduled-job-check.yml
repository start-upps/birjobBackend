name: Scheduled Job Notifications

on:
  # Run every 5 minutes during business hours (9 AM - 6 PM UTC)
  schedule:
    - cron: '*/5 9-18 * * 1-5'  # Every 5 min, 9-6 PM, Mon-Fri
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      force_check:
        description: 'Force check all users'
        required: false
        default: 'false'
        type: boolean

jobs:
  check-and-notify:
    runs-on: ubuntu-latest
    
    steps:
    - name: Get Active Devices
      id: devices
      run: |
        echo "üì± Getting active devices..."
        
        RESPONSE=$(curl -s "${{ secrets.BACKEND_URL }}/api/v1/notifications/devices")
        echo "devices=$RESPONSE" >> $GITHUB_OUTPUT
        
        DEVICE_COUNT=$(echo $RESPONSE | jq '.devices | length')
        echo "Found $DEVICE_COUNT active devices"
        
    - name: Process Job Notifications
      run: |
        echo "üîç Processing job notifications for all users..."
        
        # Run the real notification processor
        RESPONSE=$(curl -s -X POST "${{ secrets.BACKEND_URL }}/api/v1/notifications/run-real-notifications")
        
        echo "üìä Results:"
        echo "Jobs processed: $(echo $RESPONSE | jq -r '.data.processed_jobs // 0')"
        echo "Users matched: $(echo $RESPONSE | jq -r '.data.matched_users // 0')"
        echo "Notifications sent: $(echo $RESPONSE | jq -r '.data.notifications_sent // 0')"
        echo "Errors: $(echo $RESPONSE | jq -r '.data.errors // 0')"
        
        # Set output for next step
        echo "NOTIFICATIONS_SENT=$(echo $RESPONSE | jq -r '.data.notifications_sent // 0')" >> $GITHUB_ENV
        echo "ERRORS=$(echo $RESPONSE | jq -r '.data.errors // 0')" >> $GITHUB_ENV
        
    - name: Send Summary to Slack (Optional)
      if: env.NOTIFICATIONS_SENT != '0' || env.ERRORS != '0'
      run: |
        echo "üì¢ Sending summary notification..."
        
        # Example Slack webhook (optional)
        if [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "üéØ Job Notifications Update",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Job Notification Summary*\n‚Ä¢ Notifications sent: ${{ env.NOTIFICATIONS_SENT }}\n‚Ä¢ Errors: ${{ env.ERRORS }}\n‚Ä¢ Time: $(date)"
                  }
                }
              ]
            }' \
            ${{ secrets.SLACK_WEBHOOK }}
        fi
        
    - name: Health Check
      run: |
        echo "üè• Checking system health..."
        
        HEALTH=$(curl -s "${{ secrets.BACKEND_URL }}/api/v1/health")
        STATUS=$(echo $HEALTH | jq -r '.status // "unknown"')
        
        echo "System status: $STATUS"
        
        if [ "$STATUS" != "healthy" ]; then
          echo "‚ö†Ô∏è System health check failed!"
          exit 1
        fi
        
        echo "‚úÖ System is healthy"