name: Webhook Triggered Notifications

on:
  # Trigger via repository dispatch (webhook)
  repository_dispatch:
    types: 
      - send-notification
      - job-scraper-complete
      - user-registration
      - emergency-notification
  
  # Manual trigger with custom parameters
  workflow_dispatch:
    inputs:
      notification_type:
        description: 'Type of notification'
        required: true
        default: 'system'
        type: choice
        options:
        - 'system'
        - 'job_match'
        - 'test'
      device_id:
        description: 'Specific device ID (optional)'
        required: false
        type: string
      message:
        description: 'Custom message'
        required: false
        default: 'GitHub Actions notification'
        type: string

jobs:
  webhook-notify:
    runs-on: ubuntu-latest
    
    steps:
    - name: Parse Webhook Data
      id: parse
      run: |
        echo "üì® Processing webhook trigger..."
        
        # Get trigger type and data
        TRIGGER_TYPE="${{ github.event.action }}"
        echo "trigger_type=$TRIGGER_TYPE" >> $GITHUB_OUTPUT
        
        # Parse client payload if available
        if [ -n "${{ github.event.client_payload.device_id }}" ]; then
          echo "device_id=${{ github.event.client_payload.device_id }}" >> $GITHUB_OUTPUT
        fi
        
        if [ -n "${{ github.event.client_payload.message }}" ]; then
          echo "message=${{ github.event.client_payload.message }}" >> $GITHUB_OUTPUT
        fi
        
        echo "Trigger: $TRIGGER_TYPE"
        echo "Device: ${{ github.event.client_payload.device_id }}"
        echo "Message: ${{ github.event.client_payload.message }}"
        
    - name: Send System Notification
      if: steps.parse.outputs.trigger_type == 'send-notification' || github.event.inputs.notification_type == 'system'
      run: |
        echo "üì¢ Sending system notification..."
        
        DEVICE_ID="${{ steps.parse.outputs.device_id || github.event.inputs.device_id }}"
        MESSAGE="${{ steps.parse.outputs.message || github.event.inputs.message || 'System notification from GitHub Actions' }}"
        
        if [ -n "$DEVICE_ID" ]; then
          # Send to specific device
          echo "Sending to device: $DEVICE_ID"
          
          curl -s -X POST "${{ secrets.BACKEND_URL }}/api/v1/notifications/test-simple-push/$DEVICE_ID" \
            -d "message=$MESSAGE"
            
        else
          # Send to all devices
          echo "Sending to all devices..."
          
          DEVICES=$(curl -s "${{ secrets.BACKEND_URL }}/api/v1/notifications/devices" | jq -r '.devices[].device_id')
          
          for DEVICE in $DEVICES; do
            curl -s -X POST "${{ secrets.BACKEND_URL }}/api/v1/notifications/test-simple-push/$DEVICE" \
              -d "message=$MESSAGE"
            echo "Sent to: $DEVICE"
          done
        fi
        
    - name: Trigger Job Processing
      if: steps.parse.outputs.trigger_type == 'job-scraper-complete'
      run: |
        echo "üîç Job scraper completed, triggering notifications..."
        
        # Run job notification processor
        RESPONSE=$(curl -s -X POST "${{ secrets.BACKEND_URL }}/api/v1/notifications/run-real-notifications")
        
        SENT=$(echo $RESPONSE | jq -r '.data.notifications_sent // 0')
        ERRORS=$(echo $RESPONSE | jq -r '.data.errors // 0')
        
        echo "‚úÖ Job processing complete"
        echo "Notifications sent: $SENT"
        echo "Errors: $ERRORS"
        
    - name: Welcome New User
      if: steps.parse.outputs.trigger_type == 'user-registration'
      run: |
        echo "üëã New user registered, sending welcome notification..."
        
        DEVICE_ID="${{ github.event.client_payload.device_id }}"
        
        if [ -n "$DEVICE_ID" ]; then
          # Setup keywords for new user
          curl -s -X POST "${{ secrets.BACKEND_URL }}/api/v1/notifications/setup-keywords/$DEVICE_ID"
          
          # Send welcome notification
          curl -s -X POST "${{ secrets.BACKEND_URL }}/api/v1/notifications/test-simple-push/$DEVICE_ID" \
            -d "message=Welcome to BirJob! üéâ You'll now receive job notifications."
            
          echo "‚úÖ Welcome notification sent to $DEVICE_ID"
        fi
        
    - name: Emergency Notification
      if: steps.parse.outputs.trigger_type == 'emergency-notification'
      run: |
        echo "üö® Emergency notification triggered..."
        
        MESSAGE="${{ github.event.client_payload.message || 'Emergency system notification' }}"
        
        # Send to ALL devices immediately
        DEVICES=$(curl -s "${{ secrets.BACKEND_URL }}/api/v1/notifications/devices" | jq -r '.devices[].device_id')
        
        for DEVICE in $DEVICES; do
          curl -s -X POST "${{ secrets.BACKEND_URL }}/api/v1/notifications/test-simple-push/$DEVICE" \
            -d "message=üö® ALERT: $MESSAGE"
          echo "Emergency alert sent to: $DEVICE"
        done
        
    - name: Test Notification
      if: github.event.inputs.notification_type == 'test'
      run: |
        echo "üß™ Sending test notification..."
        
        # Get system stats
        STATS=$(curl -s "${{ secrets.BACKEND_URL }}/api/v1/notifications/stats")
        TOTAL_NOTIFICATIONS=$(echo $STATS | jq -r '.last_24_hours.total_notifications // 0')
        
        # Send test with stats
        DEVICES=$(curl -s "${{ secrets.BACKEND_URL }}/api/v1/notifications/devices" | jq -r '.devices[].device_id')
        
        for DEVICE in $DEVICES; do
          curl -s -X POST "${{ secrets.BACKEND_URL }}/api/v1/notifications/test-simple-push/$DEVICE" \
            -d "message=üß™ Test notification! System sent $TOTAL_NOTIFICATIONS notifications in last 24h"
        done
        
    - name: Log Results
      run: |
        echo "üìù Webhook notification workflow completed"
        echo "Trigger: ${{ github.event.action || 'manual' }}"
        echo "Timestamp: $(date)"
        echo "Repository: ${{ github.repository }}"
        echo "Workflow: ${{ github.workflow }}"